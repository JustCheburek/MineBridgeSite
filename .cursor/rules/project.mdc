---
description: 
globs: 
alwaysApply: true
---
# Структура проекта MineBridge

## Общее описание
MineBridge - это веб-приложение для полуванильного Minecraft сервера, разработанное с использованием Next.js (App Router), React и TypeScript.

## Технологический стек
- **Фреймворк**: Next.js 15 (App Router)
- **UI**: React 19 (canary)
- **Язык**: TypeScript
- **Стили**: SASS
- **База данных**: MongoDB (mongoose), MySQL
- **Аутентификация**: Lucia Auth с MongoDB адаптером
- **Валидация**: Zod

## Структура директорий

### Корневые директории
- **app/**: Основные страницы и маршруты (Next.js App Router)
- **ui/**: UI компоненты и стили
- **services/**: Сервисные функции для работы с данными
- **db/**: Настройки базы данных и модели
- **types/**: TypeScript типы и интерфейсы
- **hooks/**: React хуки
- **lib/**: Вспомогательные библиотеки
- **public/**: Статические ресурсы

### Ключевые подкаталоги
- **app/(index)/**: Главная страница
- **app/auth/**: Авторизация и аутентификация
- **app/admin/**: Административная панель
- **app/shop/**: Страницы магазина
- **app/users/**: Страницы пользователей
- **app/api/**: API endpoints
- **ui/components/**: Переиспользуемые UI компоненты
- **ui/styles/**: Стилизация
- **services/user/**: Сервисы для работы с пользователями
- **services/shop/**: Сервисы для работы с магазином
- **types/user.ts**: Определения типов пользователей
- **types/payment.ts**: Типы для платежей
- **types/purchase.ts**: Типы для покупок

## Особенности кодовой базы
1. Серверные компоненты (RSC) с минимальным использованием клиентского кода
2. Маршрутизация на основе App Router
3. Модульная структура UI компонентов
4. Типизация на уровне всех функций и компонентов
5. MongoDB для хранения данных пользователей и игровых объектов
6. Функциональные компоненты без использования классов
7. Авторизация через Lucia Auth
8. Интеграция с Discord, Telegram и VK

## Файловые соглашения
- Компоненты именуются как существительные с маленькой буквы
- Директории используют нижний регистр с дефисами
- Компоненты экспортируются именованным экспортом
- Функциональные компоненты определяются через ключевое слово `function`
- Интерфейсы предпочтительнее типов
- Обработка ошибок и валидация происходит в начале функций

## Пути до файлов
В @tsconfig.json хранятся paths, надо использовать самые короткие
Пример: @ui/components/modals -> @modals

Этот проект следует архитектурным принципам Next.js App Router с разделением на серверные и клиентские компоненты, использует последние версии React и TypeScript, и обеспечивает типобезопасность на всех уровнях приложения.


